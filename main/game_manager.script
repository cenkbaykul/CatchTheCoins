local helper = require "main.helper"
local defmath = require"defmath.defmath"
local screensize = helper.get_screensize()
local player_start_position = vmath.vector3(240,300,0)
local enemy_factory = "#enemy_factory"
local player_factory = "#player_factory"
local coin_factory = "#coin_factory"
local spawn_delay = 2.0
local starting_score = 0.0
local score_point = 1.0

local function get_factory_position()
	local factory_locations = {"north_factory","south_factory","east_factory","west_factory"}
	local center_pos = vmath.vector3(screensize.x * 0.5, screensize.y * 0.5, 0)
	local f_name = math.random(1, #factory_locations)
	local pos = vmath.vector3()
	local direction = vmath.vector3()

	if factory_locations[f_name] == "north_factory" then
		pos = vmath.vector3( math.random(32,screensize.x-32),screensize.y ,0)
	elseif factory_locations[f_name] == "south_factory" then
		pos = vmath.vector3( math.random(32,screensize.x-32),0 ,0)
	elseif factory_locations[f_name] == "east_factory" then
		pos = vmath.vector3( screensize.x, math.random(32,screensize.y-32) ,0)
	elseif factory_locations[f_name] == "west_factory" then
		pos = vmath.vector3( 0, math.random(32,screensize.y-32) ,0)
	end
	direction = vmath.normalize(center_pos - pos) + vmath.vector3( defmath.rand11(), defmath.rand11(), 0)

	local temp_data = {}
	temp_data["factory_position"] = pos
	temp_data["factory_direction"] = direction
	return temp_data
end

function spawn_coins(self)
	local xpos = defmath.rand_range(32, 448)
	local ypos = defmath.rand_range(32, 688)
	local random_pos = vmath.vector3(xpos, ypos, 0)
	local c = factory.create(coin_factory, random_pos, nil, nil, 0.3)
end

function how_many_coins(self, value)
	for i=1 , value do
		spawn_coins(self)
	end
end

function coin_generator(self)
	if math.random(1,100) % 2 == 0 then
		local n = math.random(1,100)
		if n > 75 then
			how_many_coins(self, 8)
		elseif n > 50 and n < 75 then
			how_many_coins(self, 4)
		else
			how_many_coins(self, 2)
		end
	end
end

function level_up_msg(self)
	msg.post("/HUD#game_hud", "level_up", {level = self.level})
end

function level_up(self)
	if self.level <= 1.95 then self.level = self.level + 0.02
	else self.level = 1.95 end
	level_up_msg(self)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(71/256, 97/256, 140/256, 1 ) })
	helper.get_random_seed()
	self.timer = 0.0
	self.score = starting_score
	self.enemy_factory_position = vmath.vector3()
	--msg.post("@system:", "toggle_physics_debug")
	self.is_player_alive = false
	self.level = 0
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- Player respawn
	if self.is_player_alive then
		---Create an enemy when player alive
		self.timer = self.timer + dt
		if self.timer > (spawn_delay - self.level) then
			self.timer = 0
			local get_factory = get_factory_position()
			local direction = get_factory.factory_direction
			--select position for enemy factory
			local pos = get_factory.factory_position
			local enemy = factory.create(enemy_factory,pos, nil,{speed = math.random(150,250), direction=direction},0.5)
			coin_generator(self)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("game_over") then
		self.is_player_alive = false
		self.level = 0
		self.score = starting_score
		msg.post("/HUD#game_hud", "game_over", {val = false}) -- reset score text and game_status
		timer.cancel(self.handle)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") and action.released and not self.is_player_alive then
		self.is_player_alive = true
		local player = factory.create(player_factory, player_start_position, nil, nil, 0.5)
		self.score = starting_score
		self.handle = timer.delay(3, true, level_up)
		msg.post("/HUD#game_hud", "mode", {val = true})
	end
	-- EXIT
	if action_id == hash("exit") then
		msg.post("@system:", "exit",{code = 0})
	end
end
